name: Delete Disabled Users

on:
  schedule:
    # Runs at 5:00 AM and 5:00 PM IST (23:30 & 11:30 UTC)
    - cron: "30 23,11 * * *"
  workflow_dispatch: # optional: allows manual run from Actions tab

jobs:
  call-delete-endpoint:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent infinite hanging

    steps:
      - name: Wake up backend and call DELETE endpoint
        run: |
          max_retries=5
          retry_delay=30
          
          echo "Step 1: Waking up the backend service..."
          curl -s --max-time 60 "https://soulsyncbackend.onrender.com/api/user/users" || echo "Wake-up call completed"
          
          echo "Step 2: Waiting for backend to be ready..."
          # Smart wait - check if backend is responding instead of blind 45s wait
          ready=false
          for check in {1..18}; do  # Check for up to 3 minutes (18 * 10s)
            echo "Readiness check $check/18..."
            if curl -s --max-time 10 "https://soulsyncbackend.onrender.com/api/user/users" > /dev/null 2>&1; then
              echo "Backend is ready!"
              ready=true
              break
            fi
            sleep 10
          done
          
          if [ "$ready" = false ]; then
            echo "Backend never became ready. Proceeding anyway..."
          fi
          
          echo "Step 3: Calling delete endpoint..."
          for attempt in $(seq 1 $max_retries); do
            echo "Attempt $attempt of $max_retries"
            
            temp_file=$(mktemp)
            http_code=$(curl -s -w "%{http_code}" --connect-timeout 30 --max-time 120 -o "$temp_file" -X DELETE "https://soulsyncbackend.onrender.com/api/user/deleteUserDisabledAccounts")
            response=$(cat "$temp_file")
            rm "$temp_file"
            
            echo "HTTP Status: $http_code"
            echo "Response: $response"
            
            if [ "$http_code" = "200" ]; then
              echo "Success! Deleted users endpoint called successfully"
              exit 0
            else
              echo "Attempt $attempt failed with status $http_code"
              
              if [ $attempt -lt $max_retries ]; then
                echo "Waiting $retry_delay seconds before retry..."
                sleep $retry_delay
              fi
            fi
          done
          
          echo "All $max_retries attempts failed"
          exit 1